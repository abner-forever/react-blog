{"version":3,"sources":["page/editPage/Editor.jsx","page/editPage/index.js"],"names":["BraftEditor","use","CodeHighlighter","includeEditors","excludeEditors","Editor","state","editorState","createEditorState","success","articleTitle","props","editArticle","title","submitContent","htmlContent","toRAW","console","log","handleEditorChange","setState","saveEditorContent","a","params","articleId","description","contents","ApiBlog","updateArticle","res","message","onInputChange","e","target","value","_clearText","this","className","onChange","defaultValue","placeholder","id","onSave","onClick","style","marginLeft","type","React","Component","EditorPage","inject","observer","store","storeArticle","count","location","pathname","replace","onGetEditText"],"mappings":"sTAiBAA,IAAYC,IAAIC,IALA,CACZC,eAAgB,CAAC,eACjBC,eAAgB,CAAC,kB,MAoFNC,E,4MA9EXC,MAAQ,CACJC,YAAaP,IAAYQ,kBAAkB,MAC3CC,QAAS,GACTC,aAAc,EAAKC,MAAMC,YAAYC,OAAO,wC,EAUhDC,cAAgB,SAACF,GACb,IAAMG,EAAc,EAAKT,MAAMC,YAAYS,QAC3CC,QAAQC,IAAIH,I,EAKhBI,mBAAqB,SAACZ,GAClB,EAAKa,SAAS,CAAEb,gBAChB,EAAKO,iB,EAGTO,kB,uCAAoB,WAAOT,EAAaG,GAApB,iBAAAO,EAAA,6DACZC,EAAS,CACTC,UAAWZ,EAAYY,UACvBX,MAAO,EAAKP,MAAMI,aAClBe,YAAY,KACZC,SAASX,GALG,SAOAY,IAAQC,cAAcL,EAAO,QAP7B,OAOZM,EAPY,OAQhBZ,QAAQC,IAAI,MAAMW,GACfA,GACCC,IAAQrB,QAAQ,4BAVJ,2C,0DAapBsB,cAAgB,SAACC,GACb,EAAKZ,SAAS,CACVV,aAAcsB,EAAEC,OAAOC,S,EAG/BC,WAAY,WACR,EAAKf,SAAS,CACVb,YAAaP,IAAYQ,kBAAkB,S,kMAtCrB4B,KAAKzB,MAAMC,YAAYc,S,OAA3CX,E,OACNqB,KAAKhB,SAAS,CACVb,YAAaP,IAAYQ,kBAAkBO,K,qIAuCzC,IAAD,OACGR,EAAgB6B,KAAK9B,MAArBC,YACR,OACI,yBAAK8B,UAAU,gBACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CACIA,UAAU,cACVC,SAAUF,KAAKL,cACfQ,aAAcH,KAAK9B,MAAMI,aACzB8B,YAAY,8BAEpB,yBAAKH,UAAU,oBACX,kBAAC,IAAD,CACII,GAAG,+BACHP,MAAO3B,EACP+B,SAAUF,KAAKjB,mBACfuB,OAAQN,KAAKtB,cACb0B,YAAY,gDAGpB,yBAAKH,UAAU,eACX,kBAAC,IAAD,CAAQM,QAAS,kBAAM,EAAKR,WAAW,EAAKxB,MAAMC,eAAlD,gBACA,kBAAC,IAAD,CAAQgC,MAAO,CAAEC,WAAY,IAAMC,KAAK,UAAUH,QAAS,kBAAM,EAAK7B,cAAc,EAAKH,MAAMC,eAA/F,sB,GAxECmC,IAAMC,W,QCXrBC,EAFLC,YAAO,e,GACPC,Y,oDAEG,WAAYxC,GAAQ,IAAD,8BACf,cAAMA,IACDyC,MAAQ,EAAKzC,MAAM0C,aACxB,EAAK/C,MAAQ,CACTgD,MAAO,GAJI,E,gEAQf,IAAKlB,KAAKgB,MAAMxC,YAAa,CACzB,IAAIY,EAAYY,KAAKzB,MAAM4C,SAASC,SAASC,QAAQ,SAAU,IAC/DrB,KAAKgB,MAAMM,cAAclC,M,+BAI7B,OACI,oCAEQY,KAAKgB,MAAMxC,aAAe,kBAAC,EAAD,CACtBA,YAAawB,KAAKgB,MAAMxC,YACxB0C,MAAOlB,KAAK9B,MAAMgD,a,GApBjBP,IAAMC,a,MA4BhBC","file":"static/js/7.5c21c1a4.chunk.js","sourcesContent":["import React from 'react'\n// 引入编辑器组件\nimport BraftEditor from 'braft-editor'\n// 引入编辑器样式\nimport 'braft-editor/dist/index.css'\nimport 'braft-extensions/dist/code-highlighter.css'\nimport './edit.scss'\n\nimport CodeHighlighter from 'braft-extensions/dist/code-highlighter'\nimport { message, Button, Input } from 'antd'\nimport ApiBlog from  '../../api/apiBlog'\n\nconst options = {\n    includeEditors: ['editor-id-1'], // 指定该模块对哪些BraftEditor生效，不传此属性则对所有BraftEditor有效\n    excludeEditors: ['editor-id-2']  // 指定该模块对哪些BraftEditor无效\n}\n\nBraftEditor.use(CodeHighlighter(options))\nclass Editor extends React.Component {\n\n    state = {\n        editorState: BraftEditor.createEditorState(null),\n        success: '',\n        articleTitle: this.props.editArticle.title||'默认文章标题',\n    }\n\n    async componentDidMount() {\n        const htmlContent = await this.props.editArticle.contents\n        this.setState({\n            editorState: BraftEditor.createEditorState(htmlContent)\n        })\n    }\n    //点击保存\n    submitContent = (editArticle) => {\n        const htmlContent = this.state.editorState.toRAW()\n        console.log(htmlContent);\n        return\n        this.saveEditorContent(editArticle, htmlContent)\n    }\n\n    handleEditorChange = (editorState) => {\n        this.setState({ editorState })\n        this.submitContent()\n    }\n    //提交保存\n    saveEditorContent = async (editArticle, htmlContent) => {\n        let params = {\n            articleId: editArticle.articleId,\n            title: this.state.articleTitle,\n            description:'as',\n            contents:htmlContent\n        }\n        let res = await ApiBlog.updateArticle(params,'save')\n        console.log('res',res);\n        if(res){\n            message.success('保存成功');\n        }\n    }\n    onInputChange = (e) => {\n        this.setState({\n            articleTitle: e.target.value\n        })\n    }\n    _clearText =()=>{\n        this.setState({\n            editorState: BraftEditor.createEditorState(null),\n        })\n    }\n    render() {\n        const { editorState } = this.state\n        return (\n            <div className=\"my-component\">\n                <div className='title-container'>\n                    <Input\n                        className='title-input'\n                        onChange={this.onInputChange}\n                        defaultValue={this.state.articleTitle}\n                        placeholder=\"文章标题\" />\n                </div>\n                <div className='editor-container'>\n                    <BraftEditor\n                        id=\"editor-with-code-highlighter\"\n                        value={editorState}\n                        onChange={this.handleEditorChange}\n                        onSave={this.submitContent}\n                        placeholder='请输入正文内容'\n                    />\n                </div>\n                <div className='save-footer'>\n                    <Button onClick={() => this._clearText(this.props.editArticle)}>清空</Button>\n                    <Button style={{ marginLeft: 25 }} type='primary' onClick={() => this.submitContent(this.props.editArticle)}>保存</Button>\n                </div>\n            </div>\n        )\n\n    }\n\n}\nexport default Editor","import React from 'react'\nimport Editor from './Editor'\n// 引入编辑器样式\nimport 'braft-editor/dist/index.css'\nimport { observer, inject } from 'mobx-react'\n@inject('storeArticle')\n@observer\nclass EditorPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.store = this.props.storeArticle\n        this.state = {\n            count: 0\n        }\n    }\n    componentDidMount() {\n        if (!this.store.editArticle) {\n            let articleId = this.props.location.pathname.replace('/edit/', '')\n            this.store.onGetEditText(articleId)\n        }\n    }\n    render() {\n        return (\n            <>\n                {\n                    this.store.editArticle && <Editor\n                        editArticle={this.store.editArticle}\n                        count={this.state.count}\n                    />\n                }\n            </>\n        )\n\n    }\n}\nexport default EditorPage\n"],"sourceRoot":""}